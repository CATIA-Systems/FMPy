variables:
- name: create_environment
  value: conda create --yes --quiet --name py37 -c conda-forge python=3.7 attrs dask ipython=7 lark-parser lxml matplotlib notebook numpy plotly pyqt pyqtgraph pytest-cov requests scipy

jobs:

- job: linux
  displayName: 'Ubuntu 18.04'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: $(create_environment) cmake
    displayName: Create Anaconda environment

  - bash: |
      source activate py37
      python build_cvode.py
    displayName: Build CVode binaries

  - bash: |
      source activate py37
      python build_fmucontainer.py
    displayName: Build FMU Container

  - bash: |
      source activate py37
      python build_remoting.py
    displayName: Build remoting binaries

  - bash: |
      source activate py37
      python setup.py bdist_wheel --universal
      for f in dist/FMPy-*.whl; do
        pip install $f --no-deps -vv
      done
      cd tests
      pytest --junitxml=junit/test-results.xml --cov=fmpy --cov-report=xml
      cd ..
    displayName: Build, install and run tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - task: PublishPipelineArtifact@1
    inputs:
      path: dist
      artifact: 'linux'

- job: macosx
  displayName: 'macOS 10.15'
  pool:
    vmImage: 'macos-10.15'

  steps:

  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  # We need to take ownership if we want to update conda or install packages globally
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation

  - bash: $(create_environment)
    displayName: Create Anaconda environment

  - bash: |
      source activate py37
      python build_cvode.py
    displayName: Build CVode binaries

  - bash: |
      source activate py37
      python build_fmucontainer.py
    displayName: Build FMU Container

  - bash: |
      source activate py37
      python setup.py bdist_wheel --universal
      for f in dist/FMPy-*.whl; do
        pip install $f --no-deps -vv
      done
      cd tests
      pytest --junitxml=junit/test-results.xml --cov=fmpy --cov-report=xml
      cd ..
    displayName: Build, install and run tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - task: PublishPipelineArtifact@1
    inputs:
      path: dist
      artifact: 'macosx'

- job: windows
  displayName: 'Windows 2016'
  pool:
    vmImage: 'vs2017-win2016'

  steps:

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: $(create_environment) cmake pywin32
    displayName: Create Anaconda environment

  - script: |
      call activate py37
      python build_cvode.py
    displayName: Build CVode binaries

  - script: |
      call activate py37
      python build_fmucontainer.py
    displayName: Build FMU Container

  - script: |
      call activate py37
      python build_remoting.py
    displayName: Build Remoting binaries

  - script: |
      call activate py37
      python setup.py bdist_wheel --universal
    displayName: Build wheel

  - task: PublishPipelineArtifact@1
    inputs:
      path: dist
      artifact: 'windows'

  - script: |
      call activate py37
      for %%f in (dist\FMPy-*.whl) do pip install %%f --no-deps
      cd tests
      pytest --junitxml=junit/test-results.xml --cov=fmpy --cov-report=xml
      cd ..
    displayName: Install wheel and run tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- job: merge
  dependsOn:
  - linux
  - macosx
  - windows
  displayName: 'Merge Python Wheels'
  pool:
    vmImage: 'ubuntu-18.04'

  steps:

  - bash: mkdir temp
    displayName: Merge Python Wheels

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: linux
      downloadPath: linux

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: macosx
      downloadPath: macosx

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: windows
      downloadPath: windows

  - bash: |
      unzip -o linux/*.whl -d merged
      unzip -o macosx/*.whl -d merged
      unzip -o windows/*.whl -d merged
      cd merged
      zip -r FMPy-x.x.x-py3-none-any.whl .
    displayName: Merge Python Wheels

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: merged/FMPy-x.x.x-py3-none-any.whl
      artifactName: merged
